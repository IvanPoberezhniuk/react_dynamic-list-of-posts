{"version":3,"sources":["actions/types.js","api/api.js","actions/postsActions.js","api/helpers.js","components/Comment.jsx","components/CommentsList.jsx","components/Post.jsx","components/PostList.jsx","components/SearchField.jsx","components/Button.jsx","App.jsx","reducers/postReducer.js","reducers/index.js","store.js","index.js"],"names":["POSTS","URL","fetchPosts","dispatch","type","Promise","all","fetch","concat","then","res","json","response","_response","Object","slicedToArray","posts","users","comments","map","post","objectSpread","user","find","userId","id","filter","comment","postId","groupAllData","catch","error","finally","Comment","_ref","removeComment","react_default","a","createElement","className","href","name","email","onClick","body","connect","state","postsReducer","components_Comment","key","removePost","commentId","title","address","city","street","suite","components_CommentsList","PostList","components_Post","SearchField","debouncedChangeSearchFieldValue","placeholder","onChange","autoComplete","Button","isLoading","disabled","isLoaded","_useState","useState","_useState2","searchFieldValue","setSearchFieldValue","changeSearchFieldValue","debounce","event","value","target","toLowerCase","replace","postsToRender","useMemo","includes","filterPosts","Fragment","components_SearchField","persist","components_PostList","components_Button","initialState","arguments","length","undefined","action","newState","rootReducer","combineReducers","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.53afe162.chunk.js","sourcesContent":["export const POSTS = {\n  FETCH_POSTS: 'FETCH_POSTS',\n  IS_LOADING: 'IS_LOADING',\n  IS_LOADED: 'IS_LOADED',\n  REMOVE_COMMENT: 'REMOVE_COMMENT',\n  REMOVE_POST: 'REMOVE_POST',\n  ERROR: 'ERROR'\n};\n","const URL = 'https://jsonplaceholder.typicode.com';\r\n\r\nexport const getPosts = () => {\r\n  return fetch(`${URL}/posts`).then(res => res.json());\r\n};\r\n\r\nexport const getUsers = () => {\r\n  return fetch(`${URL}/users`).then(res => res.json());\r\n};\r\n\r\nexport const getComments = () => {\r\n  return fetch(`${URL}/comments`).then(res => res.json());\r\n};\r\n","import { groupAllData } from '../api/helpers';\nimport { POSTS } from './types';\nimport { getPosts, getUsers, getComments } from '../api/api';\n\nexport const fetchPosts = () => dispatch => {\n  dispatch({\n    type: POSTS.IS_LOADING\n  });\n  Promise.all([getPosts(), getUsers(), getComments()])\n    .then(response => {\n      const [posts, users, comments] = response;\n      return groupAllData(posts, users, comments);\n    })\n    .then(posts => {\n      dispatch({\n        type: POSTS.FETCH_POSTS,\n        posts\n      });\n      dispatch({\n        type: POSTS.IS_LOADED\n      });\n    })\n    .catch(error =>\n      dispatch({\n        type: POSTS.ERROR,\n        error\n      })\n    )\n    .finally(\n      dispatch({\n        type: POSTS.IS_LOADING\n      })\n    );\n};\n\nexport const removePost = id => ({\n  type: POSTS.REMOVE_POST,\n  id\n});\n\nexport const removeComment = (postId, commentId) => {\n  return {\n    type: POSTS.REMOVE_COMMENT,\n    postId,\n    commentId\n  };\n};\n","export const groupAllData = (posts, users, comments) => {\n  return posts.map(post => ({\n    ...post,\n    user: users.find(user => post.userId === user.id),\n    comments: comments.filter(comment => comment.postId === post.id)\n  }));\n};\n","import React from 'react';\r\n\r\nconst Comment = ({ comment, postId, removeComment }) => {\r\n  return (\r\n    <section className=\"comment\">\r\n      <span className=\"comment__name\">\r\n        <a href=\"#/\">{comment.name}</a>\r\n      </span>\r\n      <span className=\"comment__email\">\r\n        <a href=\"#/\">{comment.email}</a>\r\n      </span>\r\n      <span\r\n        className=\"comment__remove\"\r\n        onClick={() => {\r\n          removeComment(postId, comment.id);\r\n        }}\r\n      >\r\n        &#10006;\r\n      </span>\r\n      <span className=\"comment__text\">{comment.body}</span>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Comment;\r\n","import React from 'react';\r\nimport Comment from './Comment';\r\nimport { connect } from 'react-redux';\r\n\r\nconst CommentsList = ({ comments, postId, removeComment }) => {\r\n  return (\r\n    <section className=\"post__comments\">\r\n      {comments.map(comment => (\r\n        <Comment\r\n          comment={comment}\r\n          removeComment={removeComment}\r\n          postId={postId}\r\n          key={comment.id}\r\n        />\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.postsReducer.posts\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  null\r\n)(CommentsList);\r\n","import React from 'react';\r\nimport CommentsList from './CommentsList';\r\nimport { connect } from 'react-redux';\r\nimport { removePost, removeComment } from '../actions/postsActions';\r\n\r\nconst Post = ({ post, removePost, removeComment }) => {\r\n  return (\r\n    <section className=\"post\">\r\n      <span className=\"post__title\">{post.title}</span>\r\n      <span className=\"post__author-name\">\r\n        <a href=\"#/\">{post.user.name}</a>\r\n      </span>\r\n      <span className=\"post__remove\" onClick={() => removePost(post.id)}>\r\n        Remove\r\n      </span>\r\n      <span className=\"post__body\">{post.body}</span>\r\n      <span className=\"post__email\">\r\n        <a href=\"#/\">{post.user.email}</a>\r\n      </span>\r\n      <span className=\"post__address\">\r\n        <a href=\"#/\">\r\n          {post.user.address.city} {post.user.address.street}{' '}\r\n          {post.user.address.suite}\r\n        </a>\r\n      </span>\r\n      <CommentsList\r\n        comments={post.comments}\r\n        removeComment={removeComment}\r\n        postId={post.id}\r\n      />\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  removePost: id => dispatch(removePost(id)),\r\n  removeComment: (postId, commentId) =>\r\n    dispatch(removeComment(postId, commentId))\r\n});\r\n\r\nexport default connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(Post);\r\n","import React from 'react';\r\nimport Post from './Post';\r\n\r\nconst PostList = ({ posts }) => {\r\n  return (\r\n    <div className=\"postList\">\r\n      {posts.map(post => (\r\n        <Post post={post} key={post.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostList;\r\n","import React from 'react';\r\n\r\nconst SearchField = ({ debouncedChangeSearchFieldValue }) => {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      className=\"searchField\"\r\n      placeholder=\"Search by title and text...\"\r\n      onChange={debouncedChangeSearchFieldValue}\r\n      autoComplete=\"off\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import React from 'react';\r\n\r\nconst Button = ({ fetchPosts, isLoading, error }) => {\r\n  const innerText = () => {\r\n    if (!isLoading && !error) {\r\n      return 'Press Me';\r\n    } else if (error) {\r\n      return 'Try Again';\r\n    } else {\r\n      return 'Loading...';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      onClick={fetchPosts}\r\n      className={error ? 'loadPostsButton error' : 'loadPostsButton'}\r\n      disabled={isLoading}\r\n    >\r\n      {innerText()}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState, useMemo } from 'react';\nimport { debounce } from 'lodash';\nimport './App.scss';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from './actions/postsActions';\n\nimport PostList from './components/PostList';\nimport SearchField from './components/SearchField';\nimport Button from './components/Button';\n\nconst App = ({ posts, isLoaded, isLoading, error, fetchPosts }) => {\n  const [searchFieldValue, setSearchFieldValue] = useState('');\n\n  const filterPosts = (posts, searchFieldValue) => {\n    if (!searchFieldValue) {\n      return posts;\n    } else {\n      return posts.filter(post =>\n        (post.title + post.body)\n          .replace(/(\\s)/gm, '')\n          .toLowerCase()\n          .includes(searchFieldValue)\n      );\n    }\n  };\n\n  const changeSearchFieldValue = debounce(event => {\n    const value = event.target.value.toLowerCase().replace(/(\\s)/gm, '');\n\n    if (!value) {\n      return setSearchFieldValue('');\n    } else {\n      setSearchFieldValue(value);\n    }\n  }, 333);\n\n  const debouncedChangeSearchFieldValue = event => {\n    event.persist();\n    changeSearchFieldValue(event);\n  };\n\n  let postsToRender = useMemo(() => filterPosts(posts, searchFieldValue), [\n    posts,\n    searchFieldValue\n  ]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"myFancyBlock\">\n        {isLoaded ? (\n          <>\n            <SearchField\n              searchFieldValue={searchFieldValue}\n              debouncedChangeSearchFieldValue={debouncedChangeSearchFieldValue}\n            />\n            <PostList posts={postsToRender} />\n          </>\n        ) : (\n          <>\n            <Button\n              error={error}\n              fetchPosts={fetchPosts}\n              isLoading={isLoading}\n            />\n            <div className=\"error__message\">{error}</div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  posts: state.postsReducer.posts,\n  isLoaded: state.postsReducer.isLoaded,\n  isLoading: state.postsReducer.isLoading,\n  error: state.postsReducer.isLoading\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchPosts: () => dispatch(fetchPosts())\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import { POSTS } from '../actions/types';\n\nconst initialState = {\n  posts: [],\n  isLoaded: false,\n  isLoading: false,\n  error: null\n};\n\nconst postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case POSTS.FETCH_POSTS:\n      return { ...state, posts: action.posts };\n    case POSTS.IS_LOADED:\n      return { ...state, isLoaded: !state.isLoaded };\n    case POSTS.IS_LOADING:\n      return { ...state, isLoading: !state.isLoading };\n    case POSTS.ERROR:\n      return { ...state, error: action.error };\n    case POSTS.REMOVE_POST:\n      const posts = state.posts.filter(post => post.id !== action.id);\n      return { ...state, posts };\n    case POSTS.REMOVE_COMMENT:\n      const newState = state.posts.map(post => {\n        if (post.id === action.postId) {\n          return {\n            ...post,\n            comments: post.comments.filter(\n              comment => comment.id !== action.commentId\n            )\n          };\n        } else {\n          return post;\n        }\n      });\n\n      return { ...state, posts: newState };\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { combineReducers } from 'redux';\nimport postsReducer from './postReducer';\n\nconst rootReducer = combineReducers({\n  postsReducer\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers/index';\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  {},\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}